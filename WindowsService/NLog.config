<?xml version="1.0" encoding="utf-8" ?>
<!--■ author: ahupa@polsl.pl, 2018 ■-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      
      autoReload="true"
      internalLogFile="c:/AbsolutePath/UWS_nlog-internal.log"
      internalLogLevel="Info"
      throwExceptions="true" >
  <!--xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"-->

  <!--<extensions>
    <add assembly="NLog.StructuredLogging.Json" />
  </extensions>-->

  <!-- log entity tables and associated event log parameters:
  main table: LogRecord: TimeStamp, Level, Logger, *SequenceId
   ├─            Source: **Address, MachineName, WindowsId
   ├─          CallSide: CallSide, LineNumber
   ├─        JsonObject: Exception, Json
   └─           Message: Message
  secondary:    Context: ThreadId, StackTrace
  -->

  <variable name="logCrLfHt"      value="&#xD;&#xA;&#x9;" />
  <variable name="logLinePrefix"  value="${longdate}|${level:upperCase=true}|${logger}" />

  <variable name="logException"   value="${json-recursive-exception:Slim}" /> <!--value="${message}"  />-->
  <variable name="logJsonObject"  value="${event-context:item=json}" />

  <variable name="logProductName" value="UWS" />
  <variable name="logTimeStamp"   value="${date:universalTime=True:format=yyyy-MM-dd HH\:mm\:ss.ffff}" /> <!--"${longdate:universalTime=true}" />-->


  <variable name="logJsonLayout"  value='{"TimeStamp":"${var:logTimeStamp}", "Level":"${level}", "Logger":"${logger}",
"MachineName":"${machinename}", "WindowsId":"${windows-identity:domain=true}", "ThreadId":"${threadid}",
"CallSide":"${callsite:fileName=false}", "LineNumber":"${callsite-linenumber}",
"Message":"${message}", "Exception": ${var:logException}, "StackTrace":"${stacktrace}", "Json": "${var:logJsonObject}" }' />


  <variable name="relativePath_Archives"          value="${basedir}/Logs/" />
  <variable name="relativePath_Logs"              value="${basedir}/Logs/" />
  <variable name="relativePath_InternalArchives"  value="${basedir}/Internal Logs/" />
  <variable name="relativePath_InternalLogs"      value="${basedir}/Internal Logs/" />

  <!-- /////////////////////////////////////////////////////////////////////// 
       optional, add some variables https://github.com/nlog/NLog/wiki/Configuration-file#variables
       See https://github.com/nlog/nlog/wiki/Configuration-file for information on customizing logging rules and outputs.
       /////////////////////////////////////////////////////////////////////// -->
  <targets>
    <!-- target levels: nominal << significant << fatal -->

    <!-- Remote Target -->
    <target xsi:type="MethodCall" name="remoteLoggingTarget_Method"
            className="ServiceLibrary.Tools.GlobalLogger, ServiceLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
            methodName="ProcessLogMessage" >
      <parameter name="timeStamp"   layout="${event-context:item=TimeStamp}" />
      <parameter name="level"       layout="${event-context:item=Level}" />
      <parameter name="logger"      layout="${event-context:item=Logger}" />
      <!--<parameter name="sequenceId"  layout="${event-context:item=SequenceId}" />--> <!-- NLog >4.5 -->

      <parameter name="address"     layout="${event-context:item=Address}" /> <!-- ?? -->
      <parameter name="machineName" layout="${event-context:item=MachineName}" />
      <parameter name="windowsId"   layout="${event-context:item=WindowsId}" />
      <parameter name="callSide"    layout="${event-context:item=CallSide}" />
      <parameter name="lineNumber"  layout="${event-context:item=LineNumber}" />

      <parameter name="threadId"    layout="${event-context:item=ThreadId}" />
      <parameter name="stackTrace"  layout="${event-context:item=StackTrace}" />

      <parameter name="message"     layout="${event-context:item=Message}" />
      <parameter name="exception"   layout="${event-context:item=Exception}" />
      <parameter name="json"        layout="${event-context:item=Json}" />
    </target>

    <!-- Remote Target -->
    <target xsi:type="Database" name="remoteLoggingTarget_Database"
            commandText="[Log].[usp_insert_eventlog_context]"
            commandType="StoredProcedure"
            connectionStringName="WindowsService.Properties.Settings.MultipleModelGlobalConnectionString"
            dbProvider="System.Data.SqlClient" >
      <!--<commandText>
        EXEC Log.usp_eventlog_insert
        (time_stamp, level, logger,
        address, machine_name, windows_id, call_side, line_number, message, exception, json_object) VALUES
        (@time_stamp, @level, @logger,
        @address, @machine_name, @windows_id, @call_side, @line_number, @message , @exception, @json_object)
      </commandText>-->

      <parameter name="@time_stamp"   layout="${event-context:item=TimeStamp}" />
      <parameter name="@level"        layout="${event-context:item=Level}" />
      <parameter name="@logger"       layout="${event-context:item=Logger}" />
      <!--<parameter name="@sequence_id"  layout="${event-context:item=SequenceId}" />--> <!-- NLog >4.5 -->

      <parameter name="@address"      layout="${event-context:item=Address}" /> <!-- ?? -->
      <parameter name="@machine_name" layout="${event-context:item=MachineName}" />
      <parameter name="@windows_id"   layout="${event-context:item=WindowsId}" />
      <parameter name="@call_side"    layout="${event-context:item=CallSide}" />
      <parameter name="@line_number"  layout="${event-context:item=LineNumber}" />

      <parameter name="@thread_id"    layout="${event-context:item=ThreadId}" />
      <parameter name="@stack_trace"  layout="${event-context:item=StackTrace}" />

      <parameter name="@message"      layout="${event-context:item=Message}" />
      <parameter name="@exception"    layout="${event-context:item=Exception}" />
      <parameter name="@json_object"  layout="${event-context:item=Json}" />
    </target>


    <!-- Local -->
    <target xsi:type="MethodCall" name="localLogging_Method"
            className="ServiceLibrary.Tools.GlobalLogger, ServiceLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
            methodName="ProcessLogMessage" >
      <parameter name="timeStamp"   layout="${var:logTimeStamp}" />
      <parameter name="level"       layout="${level:format=Ordinal}" />
      <parameter name="logger"      layout="${logger}" />
      <!--<parameter name="sequenceId"  layout="${sequenceid}" />--> <!-- NLog >4.5 -->

      <parameter name="address"     layout="${var:logProductName} service" />
      <parameter name="machineName" layout="${machinename}" />
      <parameter name="windowsId"   layout="${windows-identity:domain=true}" />
      <parameter name="callSide"    layout="${callsite:fileName=false}" />
      <parameter name="lineNumber"  layout="${callsite-linenumber}" />

      <parameter name="threadId"    layout="${threadid}" />
      <parameter name="stackTrace"  layout="${stacktrace}" />

      <parameter name="message"     layout="${message}" />
      <parameter name="exception"   layout="${var:logException}" />
      <parameter name="json"        layout="${var:logJsonObject}" />
    </target>

    <!-- Local -->
    <target xsi:type="Database" name="localLogging_Database"
            commandText="[Log].[usp_insert_eventlog_context]"
            commandType="StoredProcedure"
            connectionStringName="WindowsService.Properties.Settings.MultipleModelGlobalConnectionString"
            dbProvider="System.Data.SqlClient" >
      <!--<commandText>
        EXEC Log.usp_eventlog_insert
        (time_stamp, level, logger,
        address, machine_name, windows_id, call_side, line_number, message, exception, json_object) VALUES
        (@time_stamp, @level, @logger,
        @address, @machine_name, @windows_id, @call_side, @line_number, @message , @exception, @json_object)
      </commandText>-->

      <parameter name="@time_stamp"   layout="${var:logTimeStamp}" />
      <parameter name="@level"        layout="${level:format=Ordinal}" />
      <parameter name="@logger"       layout="${logger}" />
      <!--<parameter name="@sequence_id"  layout="${sequenceid}" />--> <!-- NLog >4.5 -->

      <parameter name="@address"      layout="${var:logProductName} service" />
      <parameter name="@machine_name" layout="${machinename}" />
      <parameter name="@windows_id"   layout="${windows-identity:domain=true}" />
      <parameter name="@call_side"    layout="${callsite:fileName=false}" />
      <parameter name="@line_number"  layout="${callsite-linenumber}" />

      <parameter name="@thread_id"    layout="${threadid}" />
      <parameter name="@stack_trace"  layout="${stacktrace}" />

      <parameter name="@message"      layout="${message}" />
      <parameter name="@exception"    layout="${var:logException}" />
      <parameter name="@json_object"  layout="${var:logJsonObject}" />
    </target>



    <!-- ///////////////////////////////////////////////////////////////////////
         add your targets here
         See https://github.com/nlog/NLog/wiki/Targets for possible targets.
         See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
         Write events to a file with the date in the filename.
         <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
                 layout="${longdate} ${uppercase:${level}} ${message}" />
         /////////////////////////////////////////////////////////////////////// -->

    <target name="jsonFile" xsi:type="File"
            fileName="${var:relativePath_Logs}/${var:logProductName}_Log.json"
            layout="${logJsonLayout}"
            keepFileOpen="false" />

    <target name="logfile" xsi:type="File"
            fileName="${var:relativePath_Logs}/${var:logProductName}_SimpleLog.log"
            layout="${var:logLinePrefix}|${message}" keepFileOpen="false" />

    <target name="exceptionFile" xsi:type="File"
            fileName="${var:relativePath_Logs}/${var:logProductName}_ExceptionLog.log"
            layout="${var:logLinePrefix}|${var:logCrLfHt}${var:logException}" />


    <!--<target name="jsonFile" xsi:type="File" fileName="${basedir}/UWS_Json.json" >
      <layout xsi:type='JsonLayout' renderEmptyObject='false' >
        <attribute name='logger' layout='${logger}' />
        <attribute name='message' layout='${message}' />
        <attribute name='onexception' layout='${newline}${exception:maxInnerExceptionLevel=10:innerExceptionSeparator=&#xD;&#xA;&#x9;:format=Type,message,method:innerFormat=Type,message,method}' />
      </layout>
    </target>-->

    <!--<target name="jsonFile" xsi:type="File" fileName="${basedir}/UWS_Json.json" >
      <layout xsi:type="JsonLayout" >
        <attribute name='time' layout='${longdate}' />
        <attribute name='level' layout='${level:upperCase=true}' />
        <attribute name='type' layout='${exception:format=Type}' />
        <attribute name='message' layout='${exception:format=Message}' />
        <attribute name='innerException' encode='false'  >
          <layout xsi:type='JsonLayout' >
            <attribute name='type' layout='${exception:format=:innerFormat=Type:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}' />
            <attribute name='message' layout='${exception:format=:innerFormat=Message:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}' />
          </layout>
        </attribute>
      </layout>
    </target>-->

  </targets>

  <rules>

    <!--
    <logger name="ServiceLibrary.Tools.GlobalLogger" minlevel="Trace" writeTo="localLogging_Database" />
    <logger name="ServiceLibrary.Tools.GlobalLogger" minlevel="Trace" writeTo="localLogging_Method"  />
    <logger name="Client.*" minLevel="Trace" writeTo="remoteLoggingTarget_Method" />
    <logger name="Client.*" minLevel="Trace" writeTo="remoteLoggingTarget_Database" />
    -->

    <!-- Local Logging -->

    <logger name="WindowsService.*" minlevel="Trace" writeTo="localLogging_Database" final="true" />
    <logger name="ServiceLibrary.Tools.GlobalLogger" minlevel="Trace" writeTo="localLogging_Database" final="true" />
    <logger name="ServiceLibrary.Services.*" minlevel="Trace" writeTo="localLogging_Database" final="true" />
    <logger name="ServiceLibrary.ServiceLogics.*" minlevel="Trace" writeTo="localLogging_Database" final="true" />
    <logger name="ServiceLibrary.*" minlevel="Trace" writeTo="localLogging_Database" final="true" />


    <!-- Remote Logging (property only) -->

    <logger name="Client.*" minLevel="Trace" writeTo="remoteLoggingTarget_Database" />


    <!-- Rare Case Logging -->

    <logger name="*" minLevel="Trace" writeTo="jsonFile" />


    <!-- ///////////////////////////////////////////////////////////////////////
         Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)
         to "f" <logger name="*" minlevel="Debug" writeTo="f" />
         /////////////////////////////////////////////////////////////////////// -->

    <logger name="*" minlevel="Trace" maxlevel="Warn" writeTo="logfile" />
    <logger name="*" minlevel="Error" writeTo="exceptionFile" />


  </rules>
</nlog>
