<?xml version="1.0" encoding="utf-8" ?>
<!--■ author: ahupa@polsl.pl, 2018 ■-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      internalLogFile="Logs/Internal Logs/nlog-internal.log"
      internalLogLevel="Info"
      throwExceptions="true" >

  <extensions>
    <add assembly="NLog.StructuredLogging.Json" />
  </extensions>

  <!-- log entity tables and associated event log parameters:
  main table: LogRecord: TimeStamp, Level, Logger, *SequenceId
   ├─            Source: **Address, MachineName, WindowsId
   ├─          CallSide: CallSide, LineNumber
   ├─        JsonObject: Exception, Json
   └─           Message: Message
  secondary:    Context: ThreadId, StackTrace
  -->

  <variable name="logCrLfHt"      value="&#xD;&#xA;&#x9;" />
  <variable name="logLinePrefix"  value="${longdate}|${level:upperCase=true}|${logger}" />

  <variable name="logException"   value="${json-recursive-exception:Slim}" />
  <variable name="logJsonObject"  value="${event-context:item=json}" />

  <variable name="logProductName" value="UWS" />
  <variable name="logTimeStamp"   value="${date:universalTime=True:format=yyyy-MM-dd HH\:mm\:ss.ffff}" /> <!--"${longdate:universalTime=true}" />-->


  <variable name="logJsonLayout"  value='{"TimeStamp":"${var:logTimeStamp}", "Level":"${level}", "Logger":"${logger}",
"MachineName":"${machinename}", "WindowsId":"${windows-identity:domain=true}", "ThreadId":"${threadid}",
"CallSide":"${callsite:fileName=false}", "LineNumber":"${callsite-linenumber}",
"Message":"${message}", "Exception": ${var:logException}, "StackTrace":"${stacktrace}", "Json": "${var:logJsonObject}" }' />

  <!-- ActivityId: System.Diagnostics trace correlation id, NLog >4.1
       SequenceId: log event's unique identifier, automatically generated, monotonously increamented, NLog >4.5
       includeMdlc: Mapped Diagnostic Logical Context, an async version of the Mapped Diagnostics Context
       logging a exception: ${message} == ${exception:toString}
  -->


  <variable name="relativePath_Archives"          value="${basedir}/Logs/" />
  <variable name="relativePath_Logs"              value="${basedir}/Logs/" />
  <variable name="relativePath_InternalArchives"  value="${basedir}/Logs/Internal Logs/" />
  <variable name="relativePath_InternalLogs"      value="${basedir}/Logs/Internal Logs/" />

  <!-- /////////////////////////////////////////////////////////////////////// 
       optional, add some variables https://github.com/nlog/NLog/wiki/Configuration-file#variables
       See https://github.com/nlog/nlog/wiki/Configuration-file for information on customizing logging rules and outputs.
       /////////////////////////////////////////////////////////////////////// -->
  <targets>
    <!-- target levels: nominal << significant << fatal -->


    <!-- Remote Exception Logging with Fallback (level: fatal) -->
    <target xsi:type="FallbackGroup" name="remoteExceptionLogging_FallbackGroup" returnToFirstOnSuccess="true" >

      <!-- default -->
      <target xsi:type="LogReceiverService" name="remoteExceptionLogging_Service"
              clientId="${cached:${guid}:cached=true:clearcache=none}"
              endpointAddress="http://localhost:7741/UnifiedWorkSolution/Loggers/LogReceiverService"
              endpointConfigurationName="WSHttpBinding_ILogReceiverServer"
              includeEventProperties="true"
              useBinaryEncoding="false" >
        <parameter name="TimeStamp"   layout="${var:logTimeStamp}" />
        <parameter name="Level"       layout="${level:format=Ordinal}" />
        <parameter name="Logger"      layout="${logger}" />
        <!--<parameter name="SequenceId"  layout="${sequenceid}" />--> <!-- NLog >4.5 -->

        <parameter name="Address"     layout="" /> <!-- needed only for re-sending logs -->
        <parameter name="MachineName" layout="${machinename}" />
        <parameter name="WindowsId"   layout="${windows-identity:domain=true}" />
        <parameter name="CallSide"    layout="${callsite:fileName=false}" />
        <parameter name="LineNumber"  layout="${callsite-linenumber}" />

        <parameter name="ThreadId"    layout="${threadid}" />
        <parameter name="StackTrace"  layout="${stacktrace}" />

        <parameter name="Message"     layout="${message}" />
        <parameter name="Exception"   layout="${var:logException}" />
        <parameter name="Json"        layout="${var:logJsonObject}" />
      </target>

      <!-- secondary, intended to be manually integrated into the default target service database -->
      <target xsi:type="File" name="remoteExceptionLogging_LocalEmergencyJsonFile"
              encoding="utf-8"
              fileName="${var:relativePath_InternalLogs}/${var:logProductName}_LocalEmergencyLog.json"
              keepFileOpen="false"
              lineEnding="CRLF" > <!--openFileCacheTimeout="3" >-->
        <layout xsi:type='JsonLayout' renderEmptyObject='true' suppressSpaces='true' >
          <attribute name="TimeStamp"   layout="${var:logTimeStamp}" />
          <attribute name="Level"       layout="${level}" />
          <attribute name="Logger"      layout="${logger}" />
          <!--<attribute name="SequenceId"  layout="${sequenceid}" />--> <!-- NLog >4.5 -->

          <attribute name="Address"     layout="" /> <!-- needed only for re-sending logs -->
          <attribute name="MachineName" layout="${machinename}" />
          <attribute name="WindowsId"   layout="${windows-identity:domain=true}" />
          <attribute name="CallSide"    layout="${callsite:fileName=false}" />
          <attribute name="LineNumber"  layout="${callsite-linenumber}" />

          <attribute name="ThreadId"    layout="${threadid}" />
          <attribute name="StackTrace"  layout="${stacktrace}" />

          <attribute name="Message"     layout="${message}" />
          <attribute name="Exception"   layout="${var:logException}" encode="false" />
          <attribute name="Json"        layout="${var:logJsonObject}" encode="false" />
        </layout>
      </target>

    </target>


    <!-- Remote Message Logging (level: significant) -->
    <target xsi:type="AsyncWrapper" name="remoteMessageLogging_AsyncWrapper"
            batchSize="200"
            fullBatchSizeWriteLimit="5"
            overflowAction="Discard"
            queueLimit="10000"
            timeToSleepBetweenBatches="50" >
      <!-- at the moment LogReceiverService target does not work with BufferingWrapper target -->
      <!--<target xsi:type="BufferingWrapper" name="remoteMessageLogging_BufferingWrapper"
            bufferSize="100"
            flushTimeout="-1"
            slidingTimeout="false" >-->
      <target xsi:type="RetryingWrapper" name="remoteMessageLogging_RetryingWrapper"
              retryCount="3"
              retryDelayMilliseconds="100" >

        <target xsi:type="LogReceiverService" name="remoteMessageLogging_Service"
                clientId="${cached:${guid}:cached=true:clearcache=none}"
                endpointAddress="http://localhost:7741/UnifiedWorkSolution/Loggers/LogReceiverService"
                endpointConfigurationName="WSHttpBinding_ILogReceiverServer"
                includeEventProperties="true"
                useBinaryEncoding="false" >
          <parameter name="TimeStamp"   layout="${var:logTimeStamp}" />
          <parameter name="Level"       layout="${level:format=Ordinal}" />
          <parameter name="Logger"      layout="${logger}" />
          <!--<parameter name="SequenceId"  layout="${sequenceid}" />--> <!-- NLog >4.5 -->

          <parameter name="Address"     layout="" /> <!-- needed only for re-sending logs -->
          <parameter name="MachineName" layout="${machinename}" />
          <parameter name="WindowsId"   layout="${windows-identity:domain=true}" />
          <parameter name="CallSide"    layout="${callsite:fileName=false}" />
          <parameter name="LineNumber"  layout="${callsite-linenumber}" />

          <parameter name="ThreadId"    layout="${threadid}" />
          <parameter name="StackTrace"  layout="${stacktrace}" />

          <parameter name="Message"     layout="${message}" />
          <parameter name="Exception"   layout="${var:logException}" />
          <parameter name="Json"        layout="${var:logJsonObject}" />
        </target>

      </target>
    </target>


    <!-- Local Message Logging (level: significant) -->
    <target xsi:type="BufferingWrapper" name="localMessageLogging_BufferingWrapper"
          bufferSize="100"
          flushTimeout="-1"
          slidingTimeout="false" >

      <target xsi:type="File" name="localMessageLogging_File" fileName="${var:relativePath_Logs}/${var:logProductName}_Log.json" >
        <layout xsi:type="JsonLayout" renderEmptyObject="true" includeMdlc="true" suppressSpaces="true" >
          <attribute name="TimeStamp"   layout="${var:logTimeStamp}" />
          <attribute name="Level"       layout="${level}" />
          <attribute name="Logger"      layout="${logger}" />
          <!--<attribute name="SequenceId"  layout="${sequenceid}" />--> <!-- NLog >4.5 -->

          <attribute name="Address"     layout="" /> <!-- needed only for re-sending logs -->
          <attribute name="MachineName" layout="${machinename}" />
          <attribute name="WindowsId"   layout="${windows-identity:domain=true}" />
          <attribute name="CallSide"    layout="${callsite:fileName=false}" />
          <attribute name="LineNumber"  layout="${callsite-linenumber}" />

          <attribute name="ThreadId"    layout="${threadid}" />
          <attribute name="StackTrace"  layout="${stacktrace}" />

          <attribute name="Message"     layout="${message}" />
          <attribute name="Exception"   layout="${var:logException}" encode="false" />
          <attribute name="Json"        layout="${var:logJsonObject}" encode="false" />

          <attribute name="AsyncNote"   layout="${mdlc:item=SomeNote}" />
        </layout>
      </target>

    </target>


    <!-- Public User Message Logging (level: nominal) -->
    <target name="logfile" xsi:type="File"
            fileName="${var:relativePath_Logs}/${var:logProductName}_SimpleLog.log"
            keepFileOpen="false"
            layout="${var:logLinePrefix}|${message}" />


    <!-- Public Exception Logging (level: nominal) -->
    <target name="exceptionFile" xsi:type="File"
            fileName="${var:relativePath_Logs}/${var:logProductName}_ExceptionLog.json" >
      <layout xsi:type='JsonLayout' renderEmptyObject='false' >
        <attribute name='time'      layout='${longdate}' />
        <attribute name='level'     layout='${level:upperCase=true}' />
        <attribute name='message'   layout='${message}' />
        <!--<attribute name='exception' layout='${json-recursive-exception:Slim}' encode='false' />-->
      </layout>
    </target>



    <!-- ///////////////////////////////////////////////////////////////////////
         add your targets here
         See https://github.com/nlog/NLog/wiki/Targets for possible targets.
         See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
         Write events to a file with the date in the filename.
         <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
                 layout="${longdate} ${uppercase:${level}} ${message}" />
         /////////////////////////////////////////////////////////////////////// -->

  </targets>

  <rules>

    <!-- Remote Exception Logging -->

    <logger name="*" minlevel="Error" writeTo="remoteExceptionLogging_FallbackGroup" />


    <!-- Remote Message Logging -->

    <logger name="Client_Application.App" minlevel="Trace" maxlevel="Warn" writeTo="remoteMessageLogging_AsyncWrapper" />


    <!-- Local Message Logging -->

    <logger name="*" minlevel="Trace" writeTo="localMessageLogging_BufferingWrapper" />


    <!-- Public Logging -->

    <logger name="*" minlevel="Trace" maxlevel="Warn" writeTo="logfile" />
    <logger name="*" minlevel="Error" writeTo="exceptionFile" />


    <!-- ///////////////////////////////////////////////////////////////////////
         Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)
         to "f" <logger name="*" minlevel="Debug" writeTo="f" />
         /////////////////////////////////////////////////////////////////////// -->

  </rules>
</nlog>
